/*
 * BDButton.h
 *
 * The constants here must correspond to the values used in the BlueDisplay App
 *
 *  Copyright (C) 2015-2023  Armin Joachimsmeyer
 *  armin.joachimsmeyer@gmail.com
 *
 *  This file is part of BlueDisplay https://github.com/ArminJo/android-blue-display.
 *
 *  BlueDisplay is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program. If not, see <http://www.gnu.org/licenses/gpl.html>.
 *
 */

#ifndef _BDBUTTON_H
#define _BDBUTTON_H

#include <stdint.h>

#if defined(ARDUINO)
#  if ! defined(ESP32)
// For not AVR platforms this contains mapping defines (at least for STM32)
#include <avr/pgmspace.h>
#  endif
#include "WString.h"    // for __FlashStringHelper
#endif

#define BUTTON_AUTO_RED_GREEN_FALSE_COLOR       COLOR16_RED
#define BUTTON_AUTO_RED_GREEN_VALUE_FOR_RED     false
#define BUTTON_AUTO_RED_GREEN_TRUE_COLOR        COLOR16_GREEN
#define BUTTON_AUTO_RED_GREEN_VALUE_FOR_GREEN   true

// Flags for BUTTON_GLOBAL_SETTINGS
static const int FLAG_BUTTON_GLOBAL_USE_DOWN_EVENTS_FOR_BUTTONS = 0x00; // Default
static const int FLAG_BUTTON_GLOBAL_USE_UP_EVENTS_FOR_BUTTONS = 0x01;   // If swipe can start on a button, you require this.
static const int FLAG_BUTTON_GLOBAL_SET_BEEP_TONE = 0x02;   // Beep on button touch

// Flags for init - must correspond to the values used at the BlueDisplay App
#define FLAG_BUTTON_NO_BEEP_ON_TOUCH        0x00
#define FLAG_BUTTON_DO_BEEP_ON_TOUCH        0x01 // Beep on this button touch
#define FLAG_BUTTON_TYPE_TOGGLE_RED_GREEN   0x02 // Value true -> green, false -> red. Value toggling is generated by button.
#define FLAG_BUTTON_TYPE_AUTOREPEAT         0x04
#define FLAG_BUTTON_TYPE_MANUAL_REFRESH     0x08 // Button must be manually drawn after event. Makes only sense for Red/Green button which should be invisible.
#define FLAG_BUTTON_TYPE_TOGGLE_RED_GREEN_MANUAL_REFRESH (FLAG_BUTTON_TYPE_TOGGLE_RED_GREEN | FLAG_BUTTON_TYPE_MANUAL_REFRESH) // Red/Green button must be manually drawn after event to show new caption/color
// Flags for local buttons
#define LOCAL_BUTTON_FLAG_IS_ACTIVE                     0x10 // Local button is to be checked by checkAllButtons() etc.
// LOCAL_BUTTON_FLAG_USE_BDBUTTON_FOR_CALLBACK is set, when we have a local and a remote button, i.e. SUPPORT_REMOTE_AND_LOCAL_DISPLAY is defined.
// Then only the remote button pointer is used as callback parameter to enable easy comparison of this parameter with a fixed button.
#define LOCAL_BUTTON_FLAG_USE_BDBUTTON_FOR_CALLBACK     0x20
#define LOCAL_BUTTON_FLAG_BUTTON_CAPTION_IS_IN_PGMSPACE 0x40
#define LOCAL_BUTTON_FLAG_MASK                          0x70

#if defined(SUPPORT_LOCAL_DISPLAY)
#include "LocalGUI/LocalTouchButton.h"
#endif

#if defined(AVR)
typedef uint8_t BDButtonHandle_t;
#else
typedef uint16_t BDButtonHandle_t;
#endif

extern BDButtonHandle_t sLocalButtonIndex; // local button index counter used by BDButton.init() and BlueDisplay.createButton()

#include "Colors.h"

#ifdef __cplusplus
class BDButton {
public:

    // Constructors
    BDButton();
    BDButton(BDButtonHandle_t aButtonHandle);
    BDButton(const BDButton &aButton);

    // Operators
    bool operator==(const BDButton &aButton);
    bool operator!=(const BDButton &aButton);
#if defined(SUPPORT_LOCAL_DISPLAY)
    bool operator==(const LocalTouchButton &aButton);
    bool operator!=(const LocalTouchButton &aButton);
#endif

    void init(uint16_t aPositionX, uint16_t aPositionY, uint16_t aWidthX, uint16_t aHeightY, color16_t aButtonColor,
            const char *aCaption, uint16_t aCaptionSize, uint8_t aFlags, int16_t aValue,
            void (*aOnTouchHandler)(BDButton*, int16_t));
    void init(uint16_t aPositionX, uint16_t aPositionY, uint16_t aWidthX, uint16_t aHeightY, color16_t aButtonColor,
            const __FlashStringHelper *aPGMCaption, uint16_t aCaptionSize, uint8_t aFlags, int16_t aValue,
            void (*aOnTouchHandler)(BDButton*, int16_t));

    void deinit(); // is defined as dummy if SUPPORT_LOCAL_DISPLAY is not active
    void activate();
    void deactivate();

    /*
     * Autorepeat functions
     */
    void setButtonAutorepeatTiming(uint16_t aMillisFirstDelay, uint16_t aMillisFirstRate, uint16_t aFirstCount,
            uint16_t aMillisSecondRate);
    static void disableAutorepeatUntilEndOfTouch();

    // Global behavior
    static void setGlobalFlags(uint16_t aFlags); // FLAG_BUTTON_GLOBAL_USE_DOWN_EVENTS_FOR_BUTTONS, FLAG_BUTTON_GLOBAL_USE_UP_EVENTS_FOR_BUTTONS


    // TODO !!! Possible memory leak !!!
    static void resetAll();

    /*
     * Functions using the list of all buttons
     */
    static void activateAll();
    static void deactivateAll();

    // Position
    void setPosition(int16_t aPositionX, int16_t aPositionY);

    // Draw
    void drawButton();
    void removeButton(color16_t aBackgroundColor); // Deactivates the button and redraws its screen space with aBackgroundColor

    // Color
    void setButtonColor(color16_t aButtonColor);
    void setButtonColorAndDraw(color16_t aButtonColor);

    // Caption
    void drawCaption();
    void setCaption(const char *aCaption, bool doDrawButton = false);
    void setCaption(const __FlashStringHelper *aPGMCaption, bool doDrawButton = false);
    void setCaptionForValueTrue(const char *aCaption);
    void setCaptionForValueTrue(const __FlashStringHelper *aCaption);
    void setCaptionFromStringArray(const char *const *aCaptionStringArrayPtr, uint8_t aStringIndex, bool doDrawButton);
    void setCaptionFromStringArray(const __FlashStringHelper *const *aCaptionStringArrayPtr, uint8_t aStringIndex, bool doDrawButton);

#if defined(AVR)
    void setCaptionPGM(const char *aPGMCaption, bool doDrawButton = false) __attribute__ ((deprecated ("Use setCaptionForValueTrue(const __FlashStringHelper *aCaption,...) with cast")));
    void setCaptionPGMForValueTrue(const char *aCaption) __attribute__ ((deprecated ("Use setCaption(const __FlashStringHelper *aCaption) with cast")));
    void setCaptionFromStringArrayPGM(const char *const aPGMCaptionStringArrayPtr[], uint8_t aStringIndex,
            bool doDrawButton = false) __attribute__ ((deprecated ("Use setCaptionFromStringArray(const __FlashStringHelper *const *aCaptionStringArrayPtr,...) with cast")));

#endif // defined(AVR)

    // Value
    void setValue(int16_t aValue, bool doDrawButton = false);
    void setValueAndDraw(int16_t aValue);

    // Feedback tone
    static void setButtonsTouchTone(uint8_t aToneIndex, uint16_t aToneDuration);
    static void setButtonsTouchTone(uint8_t aToneIndex, uint16_t aToneDuration, uint8_t aToneVolume);
    static void playFeedbackTone();
    static void playFeedbackTone(bool aPlayErrorTone);

    static void activateAllButtons() __attribute__ ((deprecated ("Renamed to activateAll")));
    static void deactivateAllButtons() __attribute__ ((deprecated ("Renamed to deactivateAll")));

    BDButtonHandle_t mButtonHandle; // Index for BlueDisplay button functions. Taken in init() from sLocalButtonIndex.

#if defined(SUPPORT_LOCAL_DISPLAY)
    LocalTouchButton *mLocalButtonPtr; // Pointer to the corresponding local button, which is allocated at init()
#endif

private:
};

///**
// * @brief Button Init Structure definition
// * This uses around 200 bytes and saves 8 to 24 bytes per button
// */
//struct ButtonInit {
//    uint16_t PositionX;
//    uint16_t PositionY;
//    uint16_t WidthX;
//    uint16_t HeightY;
//    color16_t ButtonColor;
//    uint16_t CaptionSize;
//    uint16_t Flags;
//    int16_t Value;
//    void (*aOnTouchHandler)(BDButton*, int16_t);
////    const __FlashStringHelper *PGMCaption;
//};
#endif // #ifdef __cplusplus

#endif //_BDBUTTON_H
